DATABASE_URL=postgresql://postgres:postgres@localhost:5432/postgres
MYSQL_DATABASE_URL=mysql://root:password@localhost:3306/financials
PORT=3000
MYSQL_HOST=localhost
MYSQL_USER=root
MYSQL_PASSWORD=

# MySQL database creation script
CREATE DATABASE IF NOT EXISTS financials;
USE financials;

CREATE TABLE IF NOT EXISTS financial_data (
    id INT AUTO_INCREMENT PRIMARY KEY,
    date DATE NOT NULL,
    type ENUM('Expense', 'Revenue') NOT NULL,
    source VARCHAR(255) NOT NULL,
    cost DECIMAL(10, 2) NOT NULL,
    cost_inr DECIMAL(10, 2) NOT NULL
);


# Service file for database interaction (example using Node.js and mysql)
const mysql = require('mysql2/promise');

class FinancialService {
  constructor(config) {
    this.pool = mysql.createPool(config);
  }

  async getFinancials(type) {
    const [rows] = await this.pool.execute(
      `SELECT * FROM financial_data WHERE type = ?`,
      [type]
    );
    return rows;
  }

  async addFinancial(data) {
    const [result] = await this.pool.execute(
      `INSERT INTO financial_data (date, type, source, cost, cost_inr) VALUES (?, ?, ?, ?, ?)`,
      [data.date, data.type, data.source, data.cost, data.cost_inr]
    );
    return result.insertId;
  }

  async deleteFinancial(id) {
    const [result] = await this.pool.execute(
      `DELETE FROM financial_data WHERE id = ?`,
      [id]
    );
    return result.affectedRows > 0;
  }

  async updateFinancial(id, data) {
    const [result] = await this.pool.execute(
      `UPDATE financial_data SET date = ?, type = ?, source = ?, cost = ?, cost_inr = ? WHERE id = ?`,
      [data.date, data.type, data.source, data.cost, data.cost_inr, id]
    );
    return result.affectedRows > 0;
  }
}

module.exports = FinancialService;


# API endpoints for CRUD operations (example using Express.js)
const express = require('express');
const router = express.Router();
const FinancialService = require('./financialService'); //Path may need adjustment

const poolConfig = {
  host: process.env.MYSQL_HOST,
  user: process.env.MYSQL_USER,
  password: process.env.MYSQL_PASSWORD,
  database: 'financials'
};

const financialService = new FinancialService(poolConfig);


router.get('/revenue', async (req, res) => {
  try {
    const revenue = await financialService.getFinancials('Revenue');
    res.json(revenue);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

router.get('/expenses', async (req, res) => {
  try {
    const expenses = await financialService.getFinancials('Expense');
    res.json(expenses);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

router.post('/add', async (req, res) => {
    try {
      const result = await financialService.addFinancial(req.body);
      res.status(201).json({ id: result });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });

router.delete('/:id', async (req, res) => {
    try {
      const success = await financialService.deleteFinancial(req.params.id);
      if (success) {
        res.sendStatus(204);
      } else {
        res.status(404).json({ error: 'Financial data not found' });
      }
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });


router.put('/:id', async (req, res) => {
    try {
      const success = await financialService.updateFinancial(req.params.id, req.body);
      if (success) {
        res.sendStatus(204);
      } else {
        res.status(404).json({ error: 'Financial data not found' });
      }
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });

module.exports = router;


# Updated server index.ts to include new routes
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;
const financialRoutes = require('./routes/financials'); // Adjust path as needed
const cors = require('cors');

app.use(express.json());
app.use(cors());
app.use('/api/financials', financialRoutes);


app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});


# Updated financials.tsx to use the MySQL database (React example)
import React, { useState, useEffect } from 'react';

function Financials() {
  const [revenue, setRevenue] = useState([]);
  const [expenses, setExpenses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchFinancials = async () => {
      try {
        const revenueResponse = await fetch('/api/financials/revenue');
        const expensesResponse = await fetch('/api/financials/expenses');
        if (!revenueResponse.ok || !expensesResponse.ok) {
          throw new Error('Failed to fetch financial data');
        }
        const revenueData = await revenueResponse.json();
        const expensesData = await expensesResponse.json();
        setRevenue(revenueData);
        setExpenses(expensesData);
      } catch (error) {
        setError(error);
      } finally {
        setLoading(false);
      }
    };

    fetchFinancials();
  }, []);

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>Error: {error.message}</p>;
  }

  return (
    <div>
      <h2>Revenue</h2>
      <ul>
        {revenue.map(item => (
          <li key={item.id}>{item.source} - {item.cost_inr}</li>
        ))}
      </ul>
      <h2>Expenses</h2>
      <ul>
        {expenses.map(item => (
          <li key={item.id}>{item.source} - {item.cost_inr}</li>
        ))}
      </ul>
    </div>
  );
}

export default Financials;


# Updated submitRevenue, submitExpense, deleteRevenue, deleteExpense functions (example)
//This section needs to be integrated into the financials.tsx component.  The specifics depend on your existing form structure.

const handleSubmit = async (data, type) => {
    const formattedData = {
        date: new Date().toISOString().slice(0, 10), // Format date as YYYY-MM-DD
        type: type,
        source: data.source,
        cost: parseFloat(data.cost),
        cost_inr: parseFloat(data.cost_inr)
    };

    try {
        const response = await fetch('/api/financials/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formattedData)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        // Optionally handle the response, e.g., update state
        console.log('Financial data added successfully!');
    } catch (error) {
        console.error('Error adding financial data:', error);
    }
};

const handleDelete = async (id) => {
    try {
      const response = await fetch(`/api/financials/${id}`, {
        method: 'DELETE',
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      console.log('Financial data deleted successfully!');
      //update state
    } catch (error) {
      console.error('Error deleting financial data:', error);
    }
};

const handleUpdate = async (id, updatedData) => {
    try {
      const response = await fetch(`/api/financials/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedData),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      console.log('Financial data updated successfully!');
      //update state
    } catch (error) {
      console.error('Error updating financial data:', error);
    }
  };




# package.json update to include MySQL dependency
{
  "dependencies": {
    "express": "^4.18.2",
    "mysql2": "^3.3.1",
    "cors": "^2.8.5"
  }
}

# Workflow to initialize the financials database (example using a shell script)
#!/bin/bash

mysql -u root -p -e "CREATE DATABASE IF NOT EXISTS financials;"
mysql -u root -p financials < schema.sql